layout toplevel ;
layout "of" ;

comment "--" ;
comment "{-" "-}" ;

Prg. Program ::= [Dec] ;

token Name ((letter | ["_-+*/'%^"] | digit)*
            (letter | ["_-+*/'%^"])
            (letter | ["_-+*/'%^"] | digit)*) ;

separator Name "," ;

DPrc. Dec ::= Name "(" [ChanDec] ")" "=" Proc OptDot ;
DDef. Dec ::= Name OptSig "=" TermProc OptDot ;
DSig. Dec ::= Name ":" Term OptDot ;
DDat. Dec ::= "data" Name "=" [ConName] OptDot ;

CN. ConName ::= "`" Name ;

NoDot. OptDot ::= ;
SoDot. OptDot ::= "." ;

SoTerm. TermProc ::= Term ;
SoProc. TermProc ::= Proc ;

separator ConName "|" ;

NoSig. OptSig ::= ;
SoSig. OptSig ::= ":" Term ;

separator Dec "," ;

VD. VarDec  ::= "(" Name ":" Term ")" ;

separator VarDec "" ;

CD. ChanDec ::= Name OptSession ;

separator ChanDec "," ;

Br. Branch ::= ConName "->" Term ;

separator Branch "," ;

LInteger. Literal ::= Integer ;
LDouble.  Literal ::= Double  ;
LString.  Literal ::= String  ;
LChar.    Literal ::= Char    ;

-- Atomic terms
Var.     ATerm ::= Name ;
Lit.     ATerm ::= Literal ;
Con.     ATerm ::= ConName ;
TTyp.    ATerm ::= "Type" ;
TProto.  ATerm ::= "<" [RSession] ">" ;
Paren.   ATerm ::= "(" Term ")" ;

separator ATerm "" ;

DTTyp.   DTerm ::= Name [ATerm] ;
DTBnd.   DTerm ::= "(" Name ":" Term ")" ;

RawApp.  Term  ::= ATerm [ATerm] ;
Case.    Term  ::= "case" Term "of" "{" [Branch] "}" ;
TFun.    Term  ::= VarDec [VarDec] "->" Term ;
TSig.    Term  ::= VarDec [VarDec] "**" Term ;
Lam.     Term  ::= "\\" VarDec [VarDec] "->" Term ;
TProc.   Term  ::= "proc" "(" [ChanDec] ")" Proc ;

PAct.     Proc1 ::= Act ;
PPrll.    Proc1 ::= "(" [Proc] ")" ;

PNxt.     Proc ::= Proc1 Proc ;
PDot.     Proc ::= Proc1 "." Proc ;
_.        Proc ::= Proc1 ;
separator Proc "|" ;

Nu.       Act ::= "new" "(" ChanDec "," ChanDec ")" ;
ParSplit. Act ::= Name "{" [ChanDec] "}" ;
TenSplit. Act ::= Name "[" [ChanDec] "]" ;
SeqSplit. Act ::= Name "[:" [ChanDec] ":]" ;
Send.     Act ::= "send" Name ATerm ;
Recv.     Act ::= "recv" Name VarDec ;
NewSlice. Act ::= "slice" "(" [Name] ")" ATerm "as" Name ;
Ax.       Act ::= "fwd" Session "(" [Name] ")" ;
SplitAx.  Act ::= "fwd" Integer Session Name ;
At.       Act ::= "@" ATerm "(" [Name] ")" ;

NoSession. OptSession ::= ;
SoSession. OptSession ::= ":" RSession ;

-- Atomic sessions
Atm.  Session4 ::= Name ;
End.  Session4 ::= "end" ;
Par.  Session4 ::= "{" [RSession] "}" ;
Ten.  Session4 ::= "[" [RSession] "]" ;
Seq.  Session4 ::= "[:" [RSession] ":]" ;
_.    Session4 ::= "(" Session ")" ;

-- Applicative sessions
Sort. Session3 ::= "Sort" ATerm ATerm ;
Log.  Session3 ::= "Log"  Session4 ;
Fwd.  Session3 ::= "Fwd" Integer Session4 ;
_.    Session3 ::= Session4 ;

-- Communicating sessions
Snd.  Session2 ::= "!" DTerm CSession ;
Rcv.  Session2 ::= "?" DTerm CSession ;
Dual. Session2 ::= "~" Session2 ;
_.    Session2 ::= Session3 ;

Loli. Session  ::= Session2 "-o" Session ;
_.    Session  ::= Session2 ;

Repl. RSession ::= Session OptRepl ;
separator RSession "," ;

One.  OptRepl  ::= ;
Some. OptRepl  ::= "^" ATerm ;

Cont. CSession ::= "." Session2 ;
Done. CSession ::= ;
