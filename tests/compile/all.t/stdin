cutEmptyParTensor = proc() new (c : {}, d : []) (c{} | d[])
cut_par_cut = proc()
  ( new (c  : !Int, d  : ?Int) ( send c  1 | recv d  (x  : Int) )
  | new (c' : !Int, d' : ?Int) ( send c' 1 | recv d' (x' : Int) )
  )

cutSendRecv = proc() new (c : !Int, d : ?Int) ( send c 1 | recv d (x : Int) )
double (i : ?Int, r : !Int) =
  recv i(xi : Int)
  new (c : ?Int. ?Int. !Int, d)
  (
    recv c(x : Int) recv c(y : Int) send c (x + y)
  |
    send d xi send d xi recv d(z : Int) send r z
  )
fwd2_par2_ten2 (c : Fwd 2 {?Int,!Int.?Int}) = fwd 2 {?Int,!Int.?Int} c
fwd3_par2_ten2_ten2 (c : Fwd 3 {?Int,!Int.?Int}) =
  fwd 3 {?Int,!Int.?Int} c
fwd_par0_ten0 (i : {}, o : []) = fwd{}(i,o)
fwd_par2_ten2 (i : {?Int,!Int.?Int}, o : [!Int,?Int.!Int]) = fwd{?Int,!Int.?Int}(i,o)
fwd_par2_ten2_ten2 ( i : {?Int,!Int.?Int}
                   , o : [!Int,?Int.!Int]
                   , l : {!Int,!Int.!Int}
                   ) =
  fwd {?Int,!Int.?Int}(i,o,l)
fwd_par2_ten2_ten2_ten2
  ( i : {?Int,!Int.?Int}
  , o : [!Int,?Int.!Int]
  , l : {!Int,!Int.!Int}
  , m : {!Int,!Int.!Int}
  ) =
  fwd{?Int,!Int.?Int}(i,o,l,m)
fwd_send_recv (i : ?Int, o : !Int) = fwd(?Int)(i,o)
fwd_send_recv_recv_send (i : ?Int. !Int, o : !Int. ?Int) = fwd(?Int.!Int)(i,o)
fwd_ten2_par2 (i : [?Int,!Int.?Int], o : {!Int,?Int.!Int}) = fwd[?Int,!Int.?Int](i,o)
par0 (c : {}) = c{}
par1 (c : {!Int}) = c{d} send d 42
par2 (c : {!Int,?Int}) = c{d,e} recv e (x : Int) send d x
par2mix (c : {!Int,?Int}) = c{d,e}(recv e (x : Int) | send d 42)
parallel_assoc_2tensor2_left (cde : [[!Int, !Int], !Int]) =
  cde[cd,e]
  cd[c,d]
  ( send c 1
  | send d 2
  | send e 3
  )
parallel_assoc_2tensor2_right (cde : [[!Int, !Int], !Int]) =
  cde[cd,e]
  ( cd[c,d] ( send c 1 | send d 2 )
  | send e 3
  )
parallel_assoc_flat (c : !Int, d : !Int, e : !Int) =
  ( send c 1
  | send d 2
  | send e 3
  )
parallel_assoc_left (c : !Int, d : !Int, e : !Int) =
  ( ( send c 1 | send d 2 )
  | send e 3
  )
parallel_assoc_right (c : !Int, d : !Int, e : !Int) =
  ( send c 1
  | ( send d 2 | send e 3 )
  )
parallel_assoc_tensor3_flat (cde : [!Int, !Int, !Int]) =
  cde[c,d,e]
  ( send c 1
  | send d 2
  | send e 3
  )
parallel_assoc_tensor3_left (cde : [!Int, !Int, !Int]) =
  cde[c,d,e]
  ( send c 1
  | ( send d 2 | send e 3 )
  )
parallel_assoc_tensor3_right (cde : [!Int, !Int, !Int]) =
  cde[c,d,e]
  ( ( send c 1 | send d 2 )
  | send e 3
  )
parallel_tensor4_flat (cd : [!Int,!Int], ef : [!Int,!Int]) =
  cd[c,d]
  ef[e,f]
  ( send c 1
  | send e 2
  | send d 3
  | send f 4
  )
-- Needs mix
-- [c,d],[e,f] <mix> [c,d,e,f] <split> [c,e],[d,f] <split/split> [c],[e] and [d],[f]
parallel_tensor4_v0 (cd : [!Int,!Int], ef : [!Int,!Int]) =
  cd[c,d]
  ef[e,f]
  ( ( send c 1 | send e 2 )
  | ( send d 3 | send f 4 )
  )
par_ten1_ten1 (c : {[?Int], [!Int]}) =
  c{e,d} d[l] e[h]
  recv h (x : Int) send l x
-- Accepted by the checker, makes the compiler loop
par_ten_ten_v0 (c : {[?Int, !Int], [!Int, ?Int]}) =
  c{e,d} d[k,l] e[h,g]
  ( ( recv h (x : Int)
    | ( send k 1 | recv l (y : Int) )
    )
  | send g 2
  )
par_ten_ten_v1 (c : {[?Int, !Int], [!Int, ?Int]}) =
  c{e,d} d[k,l] e[h,g]
  ( recv h (x : Int)
  | send k 1
  | recv l (y : Int)
  | send g 2
  )
par_ten_ten_v2 (c : {[?Int, !Int], [!Int, ?Int]}) =
  c{e,d} d[k,l] e[h,g]
  ( ( send k 1
    | ( recv h (x : Int) | recv l (y : Int) )
    )
  | send g 2
  )
replicate_par (c : {!Int ^ 10}) =
  c{d}
  slice (d) 10 as i
  send d i
replicate_ten (c : [!Int ^ 10]) =
  c[d]
  slice (d) 10 as i
  send d i
seq3 (c : [: !Int, !Int, !Int :]) =
  c[: c0, c1, c2 :]
  send c0 0
  send c1 1
  send c2 2

seq3_seq2 (c : [: !Int, !Int, !Int :], d : [: !Int, !Int :]) =
  c[: c0, c1, c2 :]
  d[: d0, d1 :]
  send c0 0
  send c1 1
  send d0 0
  send c2 2
  send d1 1

singleRecv (c : ?Int) = recv c (x : Int)
singleSend (c : !Int) = send c 42
sum_int (a : {?Int ^ 10}, r : !Int) =
  new (itmp : !Int.?Int, tmp)
  (send itmp 0
   fwd(?Int)(itmp, r)
  |
   a{ai}
   slice (ai) 10 as i
   recv ai  (x : Int)
   recv tmp (y : Int)
   send tmp (x + y)
  )

ten_loli_par (c : [!Int,!Int] -o {!Int,!Int}) =
  c{i,o}
  i{i0,i1}
  o{o0,o1}
  ( fwd(?Int)(i0,o0)
  | fwd(?Int)(i1,o1)
  )
ten_par_par_split (c : [{},{}]) = c[d,e] (d{} | e{})
tensor0 (c : []) = c[]
tensor1 (c : [!Int]) = c[d] send d 42
tensor2 (c : [!Int,?Int]) = c[d,e](recv e (x : Int) | send d 42)
tensor2_tensor0_tensor0_parallel (cd : [[], []]) =
  cd[c,d] ( c[] | d[] )
{-
          d[] : [d : []]
       c[]d[] : [c : [], d : []]
cd[c,d]c[]d[] : [cd : [[], []]]
-}
tensor2_tensor0_tensor0_sequence (cd : [[], []]) =
  cd[c,d] c[] d[]
tensor2_using_dual (c : [!Int,~!Int]) = c[d,e](recv e (x : Int) | send d 42)
test2 = proc()
  new (c : {?Int. !Int. ?Int, !Int. ?Int. !Int}, d)
  (
    c{c0,c1}
    recv c0 (x0 : Int)
    send c1 (x0 + 1)
    recv c1 (x1 : Int)
    send c0 (x1 + x0 + 2)
    recv c0 (x2 : Int)
    send c1 (x2 + x1 + x0 + 3)
  | d[d0,d1]
    (
      send d0 1
      recv d0 (y0 : Int)
      send d0 (y0 + 4)
    |
      recv d1 (z0 : Int)
      send d1 (z0 + 5)
      recv d1 (z1 : Int)
    )
  )
test4 (r : !Int) =
  new (c : ?Int. ?Int. ?Int, d)
  (
    recv c (x0 : Int)
    recv c (x1 : Int)
    recv c (x2 : Int)
    send r (x0 + x1 + x2)
  |
    send d 1
    send d 2
    send d 3
  )
zap_ten_fwd (cf : {(?Int -o ?Int) ^ 10}, cn : {?Int ^ 10}, co : [!Int ^ 10]) =
  cf{cfi}
  cn{cni}
  co[coi]
  slice (cfi,cni,coi) 10 as i
  cfi{cfii,cfio}
  ( fwd(?Int)(cni,cfii)
  | fwd(?Int)(cfio,coi)
  )

zap_ten_par (cf : {(?Int -o ?Int) ^ 10}, cn : {?Int ^ 10}, co : [!Int ^ 10]) =
  cf{cfi}
  cn{cni}
  co[coi]
  slice (cfi,cni,coi) 10 as i
  cfi{cfii,cfio}
  ( recv cni (x : Int)
    send cfii x
  | recv cfio (y : Int)
    send coi y
  )

zap_ten_seq (cf : {(?Int -o ?Int) ^ 10}, cn : {?Int ^ 10}, co : [!Int ^ 10]) =
  cf{cfi}
  cn{cni}
  co[coi]
  slice (cfi,cni,coi) 10 as i
  cfi{cfii,cfio}
  recv cni (x : Int)
  send cfii x
  recv cfio (y : Int)
  send coi y

zip_add (xs : {?Int ^ 10}, ys : {?Int ^ 10}, zs : [!Int ^ 10]) =
  xs{x}
  ys{y}
  zs[z]
  slice (x,y,z) 10 as i
  recv x (a : Int)
  recv y (b : Int)
  send z (a + b)
