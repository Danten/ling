comment "--" ;
comment "{-" "-}" ;

token Name ((letter | ["_-+'"] | digit)*
            (letter | ["_-+'"])
            (letter | ["_-+'"] | digit)*) ;

separator Name "," ;

Program. Program ::= [Dec] ;

Dec. Dec ::= Name OptChanDecs "=" Proc "." ;
Sig. Dec ::= Name ":" Term "." ;

terminator Dec "" ;

VarDec.  VarDec  ::= "(" Name ":" Term ")" ;

separator VarDec "" ;

NoChanDecs. OptChanDecs ::= ;
SoChanDecs. OptChanDecs ::= "(" [ChanDec] ")" ;

ChanDec. ChanDec ::= Name OptSession ;

separator ChanDec "," ;

Plus.    Op ::= "+" ;

-- Atomic terms
Var.     Term3 ::= Name ;
Lit.     Term3 ::= Integer ;
TTyp.    Term3 ::= "Type" ;
TProto.  Term3 ::= "<" [RSession] ">" ;
_.       Term3 ::= "(" Term ")" ;

-- Applicative terms
Def.     Term2 ::= Name [Term3] ;
Infix.   Term2 ::= Term2 Op Term3 ;
_.       Term2 ::= Term3 ;

TFun.    Term  ::= VarDec [VarDec] "->" Term ;
TSig.    Term  ::= VarDec [VarDec] "*"  Term ;
Proc.    Term  ::= "proc" "(" [ChanDec] ")" Proc ;
_.       Term  ::= Term2 ;

separator Term3 "" ;

Act.        Proc ::= [Pref] Procs ;

separator Proc "|" ;

ZeroP. Procs ::= ;
Ax.    Procs ::= "fwd" Session Name Name [Snk] ;
At.    Procs ::= "unpack" Term "@" "(" [Name] ")" ;
Procs. Procs ::= "(" [Proc] ")" ;

Snk.   Snk   ::= Name ;
separator Snk "" ;

Nu.       Pref ::= "new" "(" ChanDec "," ChanDec ")" ;
ParSplit. Pref ::= Name "{" [ChanDec] "}" ;
TenSplit. Pref ::= Name "[" [ChanDec] "]" ;
SeqSplit. Pref ::= Name "[:" [ChanDec] ":]" ;
NewSlice. Pref ::= "slice" Term3 "as" Name ;
Send.     Pref ::= "send" Name Term3 ;
Recv.     Pref ::= "recv" Name VarDec ;

separator Pref  ""  ;

NoSession. OptSession ::= ;
SoSession. OptSession ::= ":" Session ;

-- Atomic sessions
Atm.  Session4 ::= Name ;
End.  Session4 ::= "end" ;
Par.  Session4 ::= "{" [RSession] "}" ;
Ten.  Session4 ::= "[" [RSession] "]" ;
Seq.  Session4 ::= "[:" [RSession] ":]" ;
_.    Session4 ::= "(" Session ")" ;

-- Applicative sessions
Sort. Session3 ::= "Sort" Term3 Term3 ;
Log.  Session3 ::= "Log"  Session4 ;
Fwd.  Session3 ::= "Fwd" Integer Session4 ;
_.    Session3 ::= Session4 ;

-- Communicating sessions
Snd.  Session2 ::= "!" Term2 CSession ;
Rcv.  Session2 ::= "?" Term2 CSession ;
Dual. Session2 ::= "~" Session2 ;
_.    Session2 ::= Session3 ;

Loli. Session  ::= Session2 "-o" Session ;
_.    Session  ::= Session2 ;

Repl. RSession ::= Session OptRepl ;
separator RSession "," ;

One.  OptRepl  ::= ;
Some. OptRepl  ::= "^" Term3 ;

Cont. CSession ::= "." Session2 ;
Done. CSession ::= ;
