module MiniC.Skel where

-- Haskell module generated by the BNF converter

import MiniC.Abs
import MiniC.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transPrg :: Prg -> Result
transPrg x = case x of
  PPrg defs  -> failure x


transDec :: Dec -> Result
transDec x = case x of
  Dec qtyp id arrs  -> failure x


transDef :: Def -> Result
transDef x = case x of
  DDef dec decs stms  -> failure x
  DSig dec decs  -> failure x
  DDec dec  -> failure x


transTyp :: Typ -> Result
transTyp x = case x of
  TInt  -> failure x
  TDouble  -> failure x
  TStr flds  -> failure x
  TUni flds  -> failure x
  TVoid  -> failure x
  TPtr typ  -> failure x


transFld :: Fld -> Result
transFld x = case x of
  FFld typ id arrs  -> failure x


transArr :: Arr -> Result
transArr x = case x of
  AArr exp  -> failure x


transQTyp :: QTyp -> Result
transQTyp x = case x of
  QTyp qual typ  -> failure x


transQual :: Qual -> Result
transQual x = case x of
  NoQual  -> failure x
  QConst  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  SDec dec init  -> failure x
  SPut lval exp  -> failure x
  SFor stm1 exp2 stm3 stms4  -> failure x


transInit :: Init -> Result
transInit x = case x of
  NoInit  -> failure x
  SoInit exp  -> failure x


transOp :: Op -> Result
transOp x = case x of
  Plus  -> failure x
  Lt  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EVar id  -> failure x
  ELit n  -> failure x
  EArw exp id  -> failure x
  EFld exp id  -> failure x
  EArr exp1 exp2  -> failure x
  EInf exp1 op2 exp3  -> failure x
  EPtr exp  -> failure x
  EApp id exps  -> failure x


transLVal :: LVal -> Result
transLVal x = case x of
  LVar id  -> failure x
  LArw lval id  -> failure x
  LFld lval id  -> failure x
  LArr lval exp  -> failure x
  LPtr lval  -> failure x



