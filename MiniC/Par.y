-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module MiniC.Par where
import MiniC.Abs
import MiniC.Lex
import MiniC.ErrM

}

%name pPrg Prg
%name pDec Dec
%name pListDec ListDec
%name pDef Def
%name pListDef ListDef
%name pTyp Typ
%name pListTyp ListTyp
%name pFld Fld
%name pListFld ListFld
%name pArr Arr
%name pListArr ListArr
%name pQTyp QTyp
%name pQual Qual
%name pStm Stm
%name pInit Init
%name pListStm ListStm
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp Exp
%name pListExp ListExp
%name pLVal3 LVal3
%name pLVal2 LVal2
%name pLVal LVal
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  ',' { PT _ (TS _ 4) }
  '->' { PT _ (TS _ 5) }
  '.' { PT _ (TS _ 6) }
  ';' { PT _ (TS _ 7) }
  '=' { PT _ (TS _ 8) }
  '[' { PT _ (TS _ 9) }
  ']' { PT _ (TS _ 10) }
  'const' { PT _ (TS _ 11) }
  'double' { PT _ (TS _ 12) }
  'for' { PT _ (TS _ 13) }
  'int' { PT _ (TS _ 14) }
  'struct' { PT _ (TS _ 15) }
  'union' { PT _ (TS _ 16) }
  'void' { PT _ (TS _ 17) }
  '{' { PT _ (TS _ 18) }
  '}' { PT _ (TS _ 19) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_Op { PT _ (T_Op $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Op    :: { Op} : L_Op { Op ($1)}

Prg :: { Prg }
Prg : ListDef { MiniC.Abs.PPrg (reverse $1) }
Dec :: { Dec }
Dec : QTyp Ident ListArr { MiniC.Abs.Dec $1 $2 (reverse $3) }
ListDec :: { [Dec] }
ListDec : {- empty -} { [] }
        | Dec { (:[]) $1 }
        | Dec ',' ListDec { (:) $1 $3 }
Def :: { Def }
Def : Dec '(' ListDec ')' '{' ListStm '}' { MiniC.Abs.DDef $1 $3 (reverse $6) }
    | Dec '(' ListDec ')' ';' { MiniC.Abs.DSig $1 $3 }
    | Dec ';' { MiniC.Abs.DDec $1 }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
Typ :: { Typ }
Typ : 'int' { MiniC.Abs.TInt }
    | 'double' { MiniC.Abs.TDouble }
    | 'struct' '{' ListFld '}' { MiniC.Abs.TStr (reverse $3) }
    | 'union' '{' ListFld '}' { MiniC.Abs.TUni (reverse $3) }
    | 'void' { MiniC.Abs.TVoid }
    | Typ '*' { MiniC.Abs.TPtr $1 }
ListTyp :: { [Typ] }
ListTyp : {- empty -} { [] }
        | Typ { (:[]) $1 }
        | Typ ',' ListTyp { (:) $1 $3 }
Fld :: { Fld }
Fld : Typ Ident ListArr { MiniC.Abs.FFld $1 $2 (reverse $3) }
ListFld :: { [Fld] }
ListFld : {- empty -} { [] } | ListFld Fld ';' { flip (:) $1 $2 }
Arr :: { Arr }
Arr : '[' Exp ']' { MiniC.Abs.AArr $2 }
ListArr :: { [Arr] }
ListArr : {- empty -} { [] } | ListArr Arr { flip (:) $1 $2 }
QTyp :: { QTyp }
QTyp : Qual Typ { MiniC.Abs.QTyp $1 $2 }
Qual :: { Qual }
Qual : {- empty -} { MiniC.Abs.NoQual }
     | 'const' { MiniC.Abs.QConst }
Stm :: { Stm }
Stm : Dec Init { MiniC.Abs.SDec $1 $2 }
    | LVal '=' Exp { MiniC.Abs.SPut $1 $3 }
    | 'for' '(' Stm ';' Exp ';' Stm ')' '{' ListStm '}' { MiniC.Abs.SFor $3 $5 $7 (reverse $10) }
Init :: { Init }
Init : {- empty -} { MiniC.Abs.NoInit }
     | '=' Exp { MiniC.Abs.SoInit $2 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm ';' { flip (:) $1 $2 }
Exp4 :: { Exp }
Exp4 : Ident { MiniC.Abs.EVar $1 }
     | Integer { MiniC.Abs.ELit $1 }
     | '(' Exp ')' { $2 }
Exp3 :: { Exp }
Exp3 : Exp3 '->' Ident { MiniC.Abs.EArw $1 $3 }
     | Exp3 '.' Ident { MiniC.Abs.EFld $1 $3 }
     | Exp3 '[' Exp ']' { MiniC.Abs.EArr $1 $3 }
     | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 Op Exp3 { MiniC.Abs.EInf $1 $2 $3 } | Exp3 { $1 }
Exp :: { Exp }
Exp : '*' Exp3 { MiniC.Abs.EPtr $2 }
    | Ident '(' ListExp ')' { MiniC.Abs.EApp $1 $3 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
LVal3 :: { LVal }
LVal3 : Ident { MiniC.Abs.LVar $1 } | '(' LVal ')' { $2 }
LVal2 :: { LVal }
LVal2 : LVal2 '->' Ident { MiniC.Abs.LArw $1 $3 }
      | LVal2 '.' Ident { MiniC.Abs.LFld $1 $3 }
      | LVal2 '[' Exp ']' { MiniC.Abs.LArr $1 $3 }
      | LVal3 { $1 }
LVal :: { LVal }
LVal : '*' LVal2 { MiniC.Abs.LPtr $2 } | LVal2 { $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

