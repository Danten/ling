-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module MiniC.Par where
import MiniC.Abs
import MiniC.Lex
import MiniC.ErrM

}

%name pPrg Prg
%name pDec Dec
%name pListDec ListDec
%name pDef Def
%name pListDef ListDef
%name pTyp Typ
%name pListTyp ListTyp
%name pFld Fld
%name pListFld ListFld
%name pArr Arr
%name pListArr ListArr
%name pQTyp QTyp
%name pQual Qual
%name pStm Stm
%name pInit Init
%name pListStm ListStm
%name pOp Op
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp Exp
%name pListExp ListExp
%name pLVal3 LVal3
%name pLVal2 LVal2
%name pLVal LVal

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  ',' { PT _ (TS _ 5) }
  '->' { PT _ (TS _ 6) }
  '.' { PT _ (TS _ 7) }
  ';' { PT _ (TS _ 8) }
  '<' { PT _ (TS _ 9) }
  '=' { PT _ (TS _ 10) }
  '[' { PT _ (TS _ 11) }
  ']' { PT _ (TS _ 12) }
  'const' { PT _ (TS _ 13) }
  'double' { PT _ (TS _ 14) }
  'for' { PT _ (TS _ 15) }
  'int' { PT _ (TS _ 16) }
  'struct' { PT _ (TS _ 17) }
  'union' { PT _ (TS _ 18) }
  'void' { PT _ (TS _ 19) }
  '{' { PT _ (TS _ 20) }
  '}' { PT _ (TS _ 21) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Prg :: { Prg }
Prg : ListDef { PPrg (reverse $1) } 


Dec :: { Dec }
Dec : QTyp Ident ListArr { Dec $1 $2 (reverse $3) } 


ListDec :: { [Dec] }
ListDec : {- empty -} { [] } 
  | Dec { (:[]) $1 }
  | Dec ',' ListDec { (:) $1 $3 }


Def :: { Def }
Def : Dec '(' ListDec ')' '{' ListStm '}' { DDef $1 $3 (reverse $6) } 
  | Dec '(' ListDec ')' ';' { DSig $1 $3 }
  | Dec ';' { DDec $1 }


ListDef :: { [Def] }
ListDef : {- empty -} { [] } 
  | ListDef Def { flip (:) $1 $2 }


Typ :: { Typ }
Typ : 'int' { TInt } 
  | 'double' { TDouble }
  | 'struct' '{' ListFld '}' { TStr (reverse $3) }
  | 'union' '{' ListFld '}' { TUni (reverse $3) }
  | 'void' { TVoid }
  | Typ '*' { TPtr $1 }


ListTyp :: { [Typ] }
ListTyp : {- empty -} { [] } 
  | Typ { (:[]) $1 }
  | Typ ',' ListTyp { (:) $1 $3 }


Fld :: { Fld }
Fld : Typ Ident ListArr { FFld $1 $2 (reverse $3) } 


ListFld :: { [Fld] }
ListFld : {- empty -} { [] } 
  | ListFld Fld ';' { flip (:) $1 $2 }


Arr :: { Arr }
Arr : '[' Exp ']' { AArr $2 } 


ListArr :: { [Arr] }
ListArr : {- empty -} { [] } 
  | ListArr Arr { flip (:) $1 $2 }


QTyp :: { QTyp }
QTyp : Qual Typ { QTyp $1 $2 } 


Qual :: { Qual }
Qual : {- empty -} { NoQual } 
  | 'const' { QConst }


Stm :: { Stm }
Stm : Dec Init { SDec $1 $2 } 
  | LVal '=' Exp { SPut $1 $3 }
  | 'for' '(' Stm ';' Exp ';' Stm ')' '{' ListStm '}' { SFor $3 $5 $7 (reverse $10) }


Init :: { Init }
Init : {- empty -} { NoInit } 
  | '=' Exp { SoInit $2 }


ListStm :: { [Stm] }
ListStm : {- empty -} { [] } 
  | ListStm Stm ';' { flip (:) $1 $2 }


Op :: { Op }
Op : '+' { Plus } 
  | '<' { Lt }


Exp4 :: { Exp }
Exp4 : Ident { EVar $1 } 
  | Integer { ELit $1 }
  | '(' Exp ')' { $2 }


Exp3 :: { Exp }
Exp3 : Exp3 '->' Ident { EArw $1 $3 } 
  | Exp3 '.' Ident { EFld $1 $3 }
  | Exp3 '[' Exp ']' { EArr $1 $3 }
  | Exp4 { $1 }


Exp2 :: { Exp }
Exp2 : Exp2 Op Exp3 { EInf $1 $2 $3 } 
  | Exp3 { $1 }


Exp :: { Exp }
Exp : '*' Exp3 { EPtr $2 } 
  | Ident '(' ListExp ')' { EApp $1 $3 }


ListExp :: { [Exp] }
ListExp : {- empty -} { [] } 
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }


LVal3 :: { LVal }
LVal3 : Ident { LVar $1 } 
  | '(' LVal ')' { $2 }


LVal2 :: { LVal }
LVal2 : LVal2 '->' Ident { LArw $1 $3 } 
  | LVal2 '.' Ident { LFld $1 $3 }
  | LVal2 '[' Exp ']' { LArr $1 $3 }
  | LVal3 { $1 }


LVal :: { LVal }
LVal : '*' LVal2 { LPtr $2 } 
  | LVal2 { $1 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

