-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module MiniCXX.Par where
import MiniCXX.Abs
import MiniCXX.Lex
import MiniCXX.ErrM

}

%name pPrg Prg
%name pDec Dec
%name pListDec ListDec
%name pDef Def
%name pListDef ListDef
%name pTyp Typ
%name pListTyp ListTyp
%name pQTyp QTyp
%name pQual Qual
%name pStm Stm
%name pInit Init
%name pListStm ListStm
%name pOp Op
%name pExp Exp
%name pListExp ListExp
%name pLVal LVal

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '+' { PT _ (TS _ 3) }
  ',' { PT _ (TS _ 4) }
  '.' { PT _ (TS _ 5) }
  ';' { PT _ (TS _ 6) }
  '=' { PT _ (TS _ 7) }
  '>' { PT _ (TS _ 8) }
  '[' { PT _ (TS _ 9) }
  ']' { PT _ (TS _ 10) }
  'const' { PT _ (TS _ 11) }
  'int' { PT _ (TS _ 12) }
  'tuple<' { PT _ (TS _ 13) }
  'union_t<' { PT _ (TS _ 14) }
  'void' { PT _ (TS _ 15) }
  '{' { PT _ (TS _ 16) }
  '}' { PT _ (TS _ 17) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Prg :: { Prg }
Prg : ListDef { PPrg (reverse $1) } 


Dec :: { Dec }
Dec : QTyp Ident { DDec $1 $2 } 


ListDec :: { [Dec] }
ListDec : {- empty -} { [] } 
  | Dec { (:[]) $1 }
  | Dec ',' ListDec { (:) $1 $3 }


Def :: { Def }
Def : Dec '(' ListDec ')' '{' ListStm '}' { DDef $1 $3 (reverse $6) } 
  | Dec '(' ListDec ')' ';' { DSig $1 $3 }


ListDef :: { [Def] }
ListDef : {- empty -} { [] } 
  | ListDef Def { flip (:) $1 $2 }


Typ :: { Typ }
Typ : 'int' { TInt } 
  | 'tuple<' ListTyp '>' { TTup $2 }
  | 'union_t<' ListTyp '>' { TUni $2 }
  | Typ '[' Exp ']' { TArr $1 $3 }
  | '(' Typ ')' { $2 }


ListTyp :: { [Typ] }
ListTyp : {- empty -} { [] } 
  | Typ { (:[]) $1 }
  | Typ ',' ListTyp { (:) $1 $3 }


QTyp :: { QTyp }
QTyp : Qual Typ { QTyp $1 $2 } 
  | 'void' { QVoid }


Qual :: { Qual }
Qual : {- empty -} { NoQual } 
  | 'const' { QConst }


Stm :: { Stm }
Stm : Dec Init { SDec $1 $2 } 
  | LVal '=' Exp { SPut $1 $3 }


Init :: { Init }
Init : {- empty -} { NoInit } 
  | '=' Exp { SoInit $2 }


ListStm :: { [Stm] }
ListStm : {- empty -} { [] } 
  | ListStm Stm ';' { flip (:) $1 $2 }


Op :: { Op }
Op : '+' { Plus } 


Exp :: { Exp }
Exp : Ident { EVar $1 } 
  | Exp '.' Ident { EFld $1 $3 }
  | Exp '[' Exp ']' { EArr $1 $3 }
  | Ident '(' ListExp ')' { EApp $1 $3 }
  | Exp Op Exp { EInf $1 $2 $3 }
  | Integer { ELit $1 }
  | '(' Exp ')' { $2 }


ListExp :: { [Exp] }
ListExp : {- empty -} { [] } 
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }


LVal :: { LVal }
LVal : Ident { LVar $1 } 
  | LVal '.' Ident { LFld $1 $3 }
  | LVal '[' Exp ']' { LArr $1 $3 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

