

module MiniCXX.Abs where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq,Ord,Show,Read)
data Prg =
   PPrg [Def]
  deriving (Eq,Ord,Show,Read)

data Dec =
   DDec QTyp Ident
  deriving (Eq,Ord,Show,Read)

data Def =
   DDef Dec [Dec] [Stm]
 | DSig Dec [Dec]
  deriving (Eq,Ord,Show,Read)

data Typ =
   TInt
 | TTup [Typ]
 | TUni [Typ]
 | TArr Typ Exp
  deriving (Eq,Ord,Show,Read)

data QTyp =
   QTyp Qual Typ
 | QVoid
  deriving (Eq,Ord,Show,Read)

data Qual =
   NoQual
 | QConst
  deriving (Eq,Ord,Show,Read)

data Stm =
   SDec Dec Init
 | SPut LVal Exp
  deriving (Eq,Ord,Show,Read)

data Init =
   NoInit
 | SoInit Exp
  deriving (Eq,Ord,Show,Read)

data Op =
   Plus
  deriving (Eq,Ord,Show,Read)

data Exp =
   EVar Ident
 | EFld Exp Ident
 | EArr Exp Exp
 | EApp Ident [Exp]
 | EInf Exp Op Exp
 | ELit Integer
  deriving (Eq,Ord,Show,Read)

data LVal =
   LVar Ident
 | LFld LVal Ident
 | LArr LVal Exp
  deriving (Eq,Ord,Show,Read)

